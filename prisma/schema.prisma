generator client {
  provider = "prisma-client-js"
  output   = "../src/generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Sample {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@map("samples")
}

model User {
  id              Int           @id @default(autoincrement())
  email           String        @unique
  password        String
  name            String
  profilePicture  String?
  role            Role          @default(CUSTOMER)
  referralCode    String        @unique
  referredBy      String?
  points          Point[]
  coupons         Coupon[]
  organizedEvents Event[]       @relation("OrganizedEvents")
  createdAt       DateTime      @default(now())
  updatedAt       DateTime      @updatedAt
  transaction     Transaction[]
  Voucher         Voucher[]

  @@map("users")
}

model Point {
  id        Int      @id @default(autoincrement())
  amount    Int
  userId    Int
  user      User     @relation(fields: [userId], references: [id])
  earnedAt  DateTime @default(now())
  expiresAt DateTime
  isUsed    Boolean  @default(false)
  source    String // "REFERRAL" or other sources

  @@map("points")
}

model Coupon {
  id         Int      @id @default(autoincrement())
  code       String   @unique
  discount   Float
  userId     Int
  user       User     @relation(fields: [userId], references: [id])
  validFrom  DateTime @default(now())
  validUntil DateTime
  isUsed     Boolean  @default(false)
  source     String // "REFERRAL" or other sources

  @@map("coupons")
}

model Event {
  id             Int      @id @default(autoincrement())
  title          String
  slug           String
  description    String
  location       String
  startDate      DateTime
  endDate        DateTime
  organizerId    Int
  organizer      User     @relation(fields: [organizerId], references: [id], name: "OrganizedEvents")
  tickets        Ticket[]
  totalSeats     Int
  availableSeats Int

  category     String
  imageUrl     String?
  isPublished  Boolean       @default(false)
  createdAt    DateTime      @default(now())
  updatedAt    DateTime      @updatedAt
  transactions Transaction[] @relation("EventTransactions")
  Voucher      Voucher[]

  @@map("events")
}

model Ticket {
  id                Int                 @id @default(autoincrement())
  eventId           Int
  event             Event               @relation(fields: [eventId], references: [id])
  stock             Int
  totalPrice        Float
  createdAt         DateTime            @default(now())
  TransactionDetail TransactionDetail[]

  @@map("tickets")
}

model Voucher {
  id        Int      @id @default(autoincrement())
  code      String
  value     Int
  stock     Int
  event     Event    @relation(fields: [eventId], references: [id])
  eventId   Int
  createdBy Int
  createdAt DateTime @default(now())
  user      User?    @relation(fields: [userId], references: [id])
  userId    Int?

  @@unique([code, eventId])
  @@map("vouchers")
}

model Transaction {
  id      Int    @id @default(autoincrement())
  userId  Int
  user    User   @relation(fields: [userId], references: [id])
  eventId Int
  event   Event  @relation(fields: [eventId], references: [id], name: "EventTransactions")
  uuid    String @unique @default(uuid())

  status            TransactionStatus   @default(WAITING_FOR_PAYMENT)
  paymentProof      String?
  couponUsed        String?
  pointsUsed        Int?
  createdAt         DateTime            @default(now())
  updatedAt         DateTime            @updatedAt
  TransactionDetail TransactionDetail[]

  @@map("transactions")
}

model TransactionDetail {
  id Int @id @default(autoincrement())

  transactionId Int
  transaction   Transaction @relation(fields: [transactionId], references: [id])
  ticketId      Int
  ticket        Ticket      @relation(fields: [ticketId], references: [id])
  qty           Int
  price         Int
  createdAt     DateTime    @default(now())
  updateAt      DateTime    @updatedAt

  @@map("transaction_details")
}

enum Role {
  CUSTOMER
  ORGANIZER
  ADMIN
}

enum TransactionStatus {
  WAITING_FOR_PAYMENT
  WAITING_FOR_CONFIRMATION
  PAID
  REJECT
  EXPIRED
}
